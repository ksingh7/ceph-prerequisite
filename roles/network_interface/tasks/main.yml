---

- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install the required  packages in Redhat derivatives
  yum: name={{ item }} state=installed
  with_items: network_pkgs
  when: ansible_os_family == 'RedHat'

- name: Install the required packages in Debian derivatives
  apt: name={{ item }} state=installed update_cache=yes
  with_items: network_pkgs
  environment: env
  when: ansible_os_family == 'Debian'


- name: Make sure the include line is there in interfaces file
  lineinfile: >
     regexp="^source\ \/etc\/network\/interfaces.d\/\*"
     line="source /etc/network/interfaces.d/*"
     dest=/etc/network/interfaces
     state=present
     insertafter=EOF
  when: ansible_os_family == "Debian"

- name: Create the directory for interface cfg files
  file: path=/etc/network/interfaces.d  state=directory
  when: ansible_os_family == "Debian"

- name: Create the network configuration file for ethernet devices
  template: src=ethernet_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: network_ether_interfaces
  when: network_ether_interfaces is defined
  register: ether_result

- name: Write configuration files for rhel route configuration
  template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }} 
  with_items: network_ether_interfaces
  when: network_ether_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'

- name: Create the network configuration file for bridge devices
  template: src=bridge_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: network_bridge_interfaces
  when: network_bridge_interfaces is defined 
  register: bridge_result

- name: Write configuration files for rhel route configuration
  template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }} 
  with_items: network_bridge_interfaces
  when: network_bridge_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'

- name: Create the network configuration file for port on the bridge devices
  template: src=bridge_port_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  with_subelements: 
   - network_bridge_interfaces
   - ports
  when: network_bridge_interfaces is defined 
  register: bridge_port_result

- name: Create the network configuration file for bond devices
  template: src=bond_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: network_bond_interfaces
  when: network_bond_interfaces is defined
  register: bond_result

- name: Make sure the mellanox modules are loaded
  modprobe: name={{ item }} state=present
  ignore_errors: true
  with_items:
   - mlx4_en
   - mlx4_ib
   - mlx4_core 

- lineinfile: dest=/etc/rc.modules line="modprobe mlx4_en" state=present create=yes mode=744
- lineinfile: dest=/etc/rc.modules line="modprobe mlx4_ib" state=present create=yes mode=744
- lineinfile: dest=/etc/rc.modules line="modprobe mlx4_core" state=present create=yes mode=744

- name: Make sure the bonding module is loaded
  modprobe: name=bonding state=present
  when: bond_result|changed

- name: Write configuration files for route configuration
  template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }} 
  with_items: network_bond_interfaces
  when: network_bond_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'

- name: Create the network configuration file for slave in the bond devices
  template: src=bond_slave_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  with_subelements: 
   - network_bond_interfaces
   - bond_slaves
  when: network_bond_interfaces is defined
  register: bond_port_result

- name: Create the network configuration file for vlan devices
  template: src=ethernet_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: network_vlan_interfaces
  when: network_vlan_interfaces is defined
  register: vlan_result

- name: Write configuration files for rhel route configuration with vlan
  template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }}
  with_items: network_vlan_interfaces
  when: network_vlan_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'

- name: Restart network service
  service: name=network enabled=yes state=restarted
